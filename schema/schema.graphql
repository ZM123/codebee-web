type AuthPayload {
  user: User!
  token: String
  clientMutationId: String
}

interface Connection {
  edges: [Edge]!
}

interface Edge {
  node: Node!
}

input LoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type Mutation {
  hello: String!
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  updateUser(input: UpdateUserInput!): UserPayload!
}

interface Node {
  id: ID!
}

type Query {
  hello: String!
  viewer: Viewer!
}

input RegisterInput {
  name: String!
  email: String!
  username: String!
  password: String!
  clientMutationId: String
}

input UpdateUserInput {
  id: ID!
  name: String!
  clientMutationId: String
}

type User implements Node {
  id: ID!
  name: String!
  isAuthenticated: Boolean!
}

type UserConnection implements Connection {
  edges: [UserEdge]!
}

type UserEdge implements Edge {
  node: User!
}

type UserPayload {
  user: User!
  clientMutationId: String
}

type Viewer {
  users: UserConnection!
  user(id: ID!): User!
  me: User!
}
